#+TITLE: Оценка получившегося фреймворка
* Проект завязан на использование среды разработки IDEA
Это ограничивает нас в использовании текущего кода где либо еще. Запуск из
командной строки в этом случае весьма не тривиальный процесс (хотя и возможен),
это также ограничивает наши возможности запуска кода в CI.

Как вариант решения можно использовать maven и плагины для сборки и запуска
тестов (что я и сделал).
* Неинформативные отчеты
По выводу лога часто можно разобраться в чем проблема, но снятый скриншот или
исходный код страницы дают больше возможностей для анализа проблемы.

Как один из вариантов решения можно использовать [[https://github.com/allure-framework/allure2][allure]].
* Реализация логики через абстрактный класс
Общий код с кучей условных блоков в зависимости от платформы на мой взгляд не
очень красиво.

Я бы написал интерфейс для каждой страницы, в котором описывается поведение
страницы и имплементацию этого интерфейса для каждой платформы. Инъекцию нужных
реализаций можно настроить с помощью фреймворка Dependency Injection (например
Spring или Guice). Подключение фреймворка DI также позволит упростить инъекцию
объектов страниц в наши тесты (не нужно писать лишние конструкторы):
#+BEGIN_SRC java
  @Inject
  private ISearchPage searchPage;

  @Test
  public testSomeSearch() {
    this.searchPage.someFunc();
  }
#+END_SRC
* Выбор платформы через переменную окружения
Это не позволит нам запустить тесты одновременно на нескольких разных
платформах.

Думаю проблему можно решить с помощью фреймворка DI, и нескольких
конфигураций. Выбор окружения я бы реализовал с помощью дополнительного
аргумента JVM:
#+BEGIN_SRC shell
  mvn clean test -Dplatform=ios,android
#+END_SRC
* Базовый тест класс
На мой взгляд не очень удобно использовать базовый тест класс
~CoreTestCase~. Инстанс драйвера можно инджектить в тесты с помощью фреймворка
DI. Тестовые классы станут более независимы друг от друга.
* Испольозвание assert в PageObject
На мой взгляд использование Assert допустимо только в тестах. Сами PageObject-ы
по сути являются тестируемым клиентом для мобильного приложения и не должны
внутри выполнять какие то проверки.
